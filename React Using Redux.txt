1. Install Dependencies
	-axios(for making http requests from client side/ to make api calls from client side)
	-react-router-dom(to create single page applications that our page wont be refreshed)
	-redux-devtools-extension()
	-redux-thunk(to make async calls in redux actions)
	-material ui

2. lets check if react application is working

3. Start react app and remove unnecessary files and folders

4. Configure Redux Store
	-create a new folder(store)...> new file store.js in src
	-in beginning we will just configure necessary tools
		-import composeWithDevTools from redux-devtools-extension
		-import combineReducers, createStore, applyMiddleware from redux
		-import thunk from redux-thunk

5. create a root reducer in store.js
	-const rootReducer = combineReducers({});


6. create store 
	-const store = createStore(
  	 rootReducer,
  	 composeWithDevTools(applyMiddleware(thunk))
	 );

7. export store

8. create actions and reducers folders in store folder

9. create a new file "authReducer.js" in reducer folder(for holding login and register state and authentication token)


10. in authReducer.js
	-create the intialstate(userDetails : null at the beginning when we start our application)
		-const initState = {
 		   userDetails: null,
		 };

	-create first reducer
		-const reducer = (state = initState, action) => {
   		 switch (action.type) {
    		     case "DUMMY":
            
       		      return {
       		          // returns the previous state
       		          ...state
       		      };
    
       		  default:
      		      return state;
		     }
		 }

11. Now for every reducer ..create an action file.
	-authActions.js in actions folder
		-create a variable(autActions)...will define it later..

12. Import reducer from authReducer in store.js	
	-now access the properties of authreducer in rootReducer.
		-const rootReducer = combineReducers({
		    auth: authReducer,
		 });

13. Now check the app if it is working or not.

14. Add routing to application in App.js
	-import BrowserRouter, {Navigate}, Route, Routes from react-router-dom
	-create router
		-return react fragment
			-function App() {
			  return (
			    <>
			      <Router>
			        <Routes>
			          <Route path="/login" element={<LoginPage />} />
			          <Route path="/register" element={<RegisterPage />} />
			          <Route path="/dashboard" element={<Dashboard />} />
			          <Route path="*" element={<Navigate to="/dashboard" />} />
			        </Routes>
			      </Router>
			    </>
			  );
			  }


15. In src create a folder named authPages
	- in this folder create two folders...1.LoginPage...2.RegisterPage..
		-in both create RegisterPage.js....LoginPage.js  respectively


16. in RegisterPage.js create a functional component(rafce shortcut) and simply return any text.
    do same for LoginPage.js

17. create a folder named Dashboard in src... in it create a file named Dashboard.js
	-create a functional component in it and return any text for now.

18. Import loginPage, RegisterPage and Dashboard in App.js

19. create logic for login and register
	-first we will use authentication in both of the files..so it is better to create authentication in another folder and then use it in these both..or wherever needed.
		-create a folder(shared) in src..in it another folder components.
			-in component..AuthBox.js file

20. in AuthBox.js(we will see this box in the middle when we are trying to login or register)
	-import Box from @mui/material/Box
	-import {styled} from @mui/system (give us possibility to creatte our custom styled components as the react component..we will configure div with styling and use as a react component)

	-first component using styled(BoxWrapper)
		-we will wrap the box..which we will see at the middle of the screen.
		-we will provide styling here only...
			-const BoxWrapper = styled("div")({
			  width: "100%",
			  height: "100vh",
			  display: "flex",
			  alignItems: "center",
			  justifyContent: "center",
			  background: "#5865F2",
			 });
	-const AuthBox = (props) => {
	  return (
	    <BoxWrapper>
	        <Box>
	            {props.children}
	        </Box>
	    </BoxWrapper>
	  )
	};
	export default AuthBox;

	-now style the box...(we dont have to write the component twice...it is just to show..)
		-const AuthBox = (props) => {
		  return (
		    <BoxWrapper>
		      <Box
		        sx={{
		          width: 700,
		          height: 400,
		          bgcolor: "#36393F",
			  borderRadius: "5px",
        		  boxShadow: "0 2px 10px 0 rgb(0 0 0 / 20%)",
         		  display: "flex",
        		  flexDirection: "column",
        		  padding: "25px",
      			  }}
		        }}
		      >
		        {props.children}
		      </Box>
		    </BoxWrapper>
		  );
		};
		export default AuthBox;

-- install two packages if not already.... @emotion/react @emotion/styled

21.use this AuthBox in login and register
	-import AuthBox in both files