1. Install Dependencies
	-axios(for making http requests from client side/ to make api calls from client side)
	-react-router-dom(to create single page applications that our page wont be refreshed)
	-redux-devtools-extension()
	-redux-thunk(to make async calls in redux actions)
	-material ui

2. lets check if react application is working

3. Start react app and remove unnecessary files and folders

4. Configure Redux Store
	-create a new folder(store)...> new file store.js in src
	-in beginning we will just configure necessary tools
		-import composeWithDevTools from redux-devtools-extension
		-import combineReducers, createStore, applyMiddleware from redux
		-import thunk from redux-thunk

5. create a root reducer in store.js
	-const rootReducer = combineReducers({});


6. create store 
	-const store = createStore(
  	 rootReducer,
  	 composeWithDevTools(applyMiddleware(thunk))
	 );

7. export store

8. create actions and reducers folders in store folder

9. create a new file "authReducer.js" in reducer folder(for holding login and register state and authentication token)


10. in authReducer.js
	-create the intialstate(userDetails : null at the beginning when we start our application)
		-const initState = {
 		   userDetails: null,
		 };

	-create first reducer
		-const reducer = (state = initState, action) => {
   		 switch (action.type) {
    		     case "DUMMY":
            
       		      return {
       		          // returns the previous state
       		          ...state
       		      };
    
       		  default:
      		      return state;
		     }
		 }

11. Now for every reducer ..create an action file.
	-authActions.js in actions folder
		-create a variable(autActions)...will define it later..

12. Import reducer from authReducer in store.js	
	-now access the properties of authreducer in rootReducer.
		-const rootReducer = combineReducers({
		    auth: authReducer,
		 });

13. Now check the app if it is working or not.

14. Add routing to application in App.js
	-import BrowserRouter, {Navigate}, Route, Routes from react-router-dom
	-create router
		-return react fragment
			-function App() {
			  return (
			    <>
			      <Router>
			        <Routes>
			          <Route path="/login" element={<LoginPage />} />
			          <Route path="/register" element={<RegisterPage />} />
			          <Route path="/dashboard" element={<Dashboard />} />
			          <Route path="*" element={<Navigate to="/dashboard" />} />
			        </Routes>
			      </Router>
			    </>
			  );
			  }


15. In src create a folder named authPages
	- in this folder create two folders...1.LoginPage...2.RegisterPage..
		-in both create RegisterPage.js....LoginPage.js  respectively


16. in RegisterPage.js create a functional component(rafce shortcut) and simply return any text.
    do same for LoginPage.js

17. create a folder named Dashboard in src... in it create a file named Dashboard.js
	-create a functional component in it and return any text for now.

18. Import loginPage, RegisterPage and Dashboard in App.js

19. create logic for login and register
	-first we will use authentication in both of the files..so it is better to create authentication in another folder and then use it in these both..or wherever needed.
		-create a folder(shared) in src..in it another folder components.
			-in component..AuthBox.js file

20. in AuthBox.js(we will see this box in the middle when we are trying to login or register)
	-import Box from @mui/material/Box
	-import {styled} from @mui/system (give us possibility to creatte our custom styled components as the react component..we will configure div with styling and use as a react component)

	-first component using styled(BoxWrapper)
		-we will wrap the box..which we will see at the middle of the screen.
		-we will provide styling here only...
			-const BoxWrapper = styled("div")({
			  width: "100%",
			  height: "100vh",
			  display: "flex",
			  alignItems: "center",
			  justifyContent: "center",
			  background: "#5865F2",
			 });
	-const AuthBox = (props) => {
	  return (
	    <BoxWrapper>
	        <Box>
	            {props.children}
	        </Box>
	    </BoxWrapper>
	  )
	};
	export default AuthBox;

	-now style the box...(we dont have to write the component twice...it is just to show..)
		-const AuthBox = (props) => {
		  return (
		    <BoxWrapper>
		      <Box
		        sx={{
		          width: 700,
		          height: 400,
		          bgcolor: "#36393F",
			  borderRadius: "5px",
        		  boxShadow: "0 2px 10px 0 rgb(0 0 0 / 20%)",
         		  display: "flex",
        		  flexDirection: "column",
        		  padding: "25px",
      			  }}
		        }}
		      >
		        {props.children}
		      </Box>
		    </BoxWrapper>
		  );
		};
		export default AuthBox;

-- install two packages if not already.... @emotion/react @emotion/styled

21.use this AuthBox in login and register
	-import AuthBox in both files

22. create a file named LoginPageHeader.js in LoginPage folder.
	-create a functional component in it.
	-import Tpography from material ui.(allow us to render a different component)
		-import React from "react";
		 import { Typography } from "@mui/material";

		 const LoginPageHeader = () => {
 		 return (
   		 	<>
     		 	<Typography variant="h5" sx={{ color: "white" }}>
       			 Welcome Back!
     			 </Typography>
     			 <Typography sx={{color: "#b9bbbe"}}>We are happy that you are with us!</Typography>
   			 </>
 			 );
			 };
			export default LoginPageHeader;

23. now import LoginPageHeader in LoginPage.js as pass a a child in AuthBox component.

24. create an input form for login.
	-create a file name LoginPageInput.js in LoginPage folder.
	-noe import it in LoginPage.js and use it after header component.
	-create the input component as a shared component in shared>components folder..because we will be using it at multiple places.(InputLabel.js)

	-in InputLabel.js... import styled from mui/system
		-create a wrapper for the input and the label
		-create styled component for input and label
			-const Wrapper = styled("div")({
			  display: "flex",
			  justifyContent: "center",
			  flexDirection: "column",
			  width: "100%",
			});

			const Label = styled("p")({
			  color: "#b9bbbe",
 			  textTransform: "uppercase",
			  fontWeight: "600",
			  fontSize: "16px",
			});

			const Input = styled("input")({
			  flexGrow: 1,
			  height: "40px",
			  border: "1px solid black",
			  borderRadius: "5px",
			  color: "#dcddde",
			  background: "#35393f",
			  margin: 0,
			  fontSize: "16px",
			  padding: "0 5px",
			});

		-in InputLabel function...
			-destructure props..(const {value, setValue, label, type, placeholder} = props)
			-create handleVlaueChange function
				-const handleValueChange = (event) => {
  				  setValue(event.target.value);
				  };

			-return <Wrapper>
       				 <Label>{label}</Label>
       					 <Input 
       					 value={value}
       					 onChange={handleValueChange}
       					 type={type}
       					 placeholder={placeholder}/>
    				</Wrapper>

25. use InputLabel in LoginPageInput.js
	-pass the props
		-return <>
 		 <InputLabel 
 		 value
 		 setValue
 		 label="E-mail"
 		 type="text"
 		 placeholder="Enter e-mail address" />
 		 </>
	-value and setValue will be coming from the LoginPage.js

26. in LoginPage
	-const [mail, setMail] = useState('')
 	 const[password, setPassword] =useState('')

	-pass all these props to <LoginPageInput/>
		-<LoginPageInput
       		  mail={mail}
      		  setMail={setMail}
        	  password={password}
        	  setPassword={setPassword}
      		  />

27. get these props in LoginPageInput in props by detsructuring
	-const LoginPageInput = ({mail, setMail, password, setPassword}) => {
 	 return (
   	 <>
     	 <InputLabel
       	 value={mail}
       	 setValue={setMail}
       	 label="E-mail"
       	 type="text"
       	 placeholder="Enter e-mail address"
     	 />
     	 <InputLabel
       	 value={password}
       	 setValue={setPassword}
       	 label="Password"
       	 type="password"
       	 placeholder="Enter password"
     	 />
   	 </>
 	 );
	 }

28. create custom button to login/submit form
	-create a LoginPageFooter.js in LoginPage folder
		-we will be getting values(handleLogin, isFormValid) from the props.(only when the form is valid..will be able to press the button).
		-create ab button to login(we will create it in shared component(CustomPrimaryButton.js))

29. create CustomPrimaryButton.js in shared>components folder
	-import button from material ui...and we can configure it using typography
	-we will be getting some properties from the props{label,additionalStyles,disabled,onClick,}
	-const CustomPrimaryButton = ({
 	 label,
 	 additionalStyles,
 	 disabled,
 	 onClick,
	}) => {
 	 return (
   	 <Button
     	 variant="contained"
     	 sx={{
      	   bgcolor: "#5865F2",
      	   color: "white",
      	   textTransform: "none",
      	   fontSize: "16px",
      	   fontWeight: 500,
     	   width: "100%",
     	   height: "40px",
     	 }}
     	 style={additionalStyles ? additionalStyles: {}}
     	 disabled={disabled}
    	  onClick={onClick}
   	 >
   	   {label}
   	 </Button>
  	);
	};
30. use CustomPrimaryButton in LoginPageFooter.js
	-pass props in it
		-const LoginPageFooter = ({ handleLogin, isFormValid }) => {
		  return (
  		  <div>
   		   <CustomPrimaryButton
  		      label="Log in"
   		     additionalStyles={{ marginTop: "30px" }}
  		      disabled={!isFormValid}
  		      onClick={handleLogin}
  		    />
  		  </div>
  		);
		};

31. use LoginPageFooter.js in LoginPage.js and pass some props in it.
	-<LoginPageFooter isFormValid={isFormValid} handleLogin={handleLogin}/>

	-create useState for isFormValid and pass initial state to be false
	-create handleLogin function

32. create caption at the bottom of button
	-craete a new file RedirectInfo.js in shared>components
		-import React from "react";
		 import { Typography } from "@mui/material";
		 import { styled } from "@mui/system";

		 const RedirectText = styled("span")({
 		 color: "#00AFF4",
 		 fontWeight: 500,
 		 cursor: "pointer",
			});

		const RedirectInfo = ({
 		 text,
 		 redirectText,
 		 additionalStyles,
 		 redirectHandler,
		}) => {
		  return (
 		   <Typography
  		    sx={{ color: "#72767d" }}
  		    style={additionalStyles ? additionalStyles : {}}
  		    variant="subtitles2"
  		  >
  		    {text}
  		    <RedirectText onClick={redirectHandler}>{redirectText}</RedirectText>
  		  </Typography>
 		 );
		 };
		 export default RedirectInfo;

	-use it in LoginPageFooter
		<RedirectInfo 
		        text="Need an account?"
		        redirectText="Create an account"
		        additionalStyles={{marginTop: "5px"}}
		        redirectHandler={handlePushToRegisterPage} 
		/>

		-use useNavigate() hook to create handlePushToRegisterPage function.
			const LoginPageFooter = ({ handleLogin, isFormValid }) => {
			  const navigate = useNavigate();

			  const handlePushToRegisterPage = () => {
			    navigate("/register");
			  };

33. create tooltip message when mouseover
	-import tooltip from mui in LoginPageFooter and wrap customprimarybutton in it.
	-tooltip only contains html elements as its child...so ...> div

	<Tooltip 
      title={!isFormValid ? getFormNotValidMessage() : getFormValidMessage()}> //create these functions
        <div>
          <CustomPrimaryButton
            label="Log in"
            additionalStyles={{ marginTop: "30px" }}
            disabled={!isFormValid}
            onClick={handleLogin}
          />
        </div>



34. create validation for the login page(when password or mail change..validate the value)
	-use useEffect hook in LoginPage.js
		useEffect(() => {
		    setIsFromValid(validateLoginForm({mail, password}))
		  },[mail, password, setIsFromValid])
		-create validateLoginForm function in shared folder
			-first create a folder(utils).. then in utils create a file validators.js

35. create Register page
	-typography...
	-import useState

36. create a new file RegisterPageInputs.js in RegisterPage folder
	-we will pass some inputs from register page to this page(props)
		-import RegisterPageInputs in RegisterPage and pass props
	-use inputlabel.js in RegisterPageInput (already created inputlabel.js for login)

37. create a file RegisterPageFooter.js in RegisterPage folder
	-do same thing as LoginPageFooter(copy from there)

38. import RegisterPageFooter in RegisterPage and pass props

39. create a validateRegisterForm() function in validators.js
  -import validateRegisterForm in RegisterPage.js


40. NOW WRITE LOGIC TO COMMUNICATE WITH API
	(in src folder create a new file(api.js))

41 in api.js
	-import axios
	-setup this file

42. in authActions.js file (store > actions)
	-import everything as api from api.js

	-define redux actions
	-create a function to receive dispatch(will return an object with functions with our actions)
		-login action(if you disppatch this action-->will dispatch a function of name login)
		-register action
			export const getActions = (dispatch) => {
				  return {
				    login: (userDetails, history) => dispatch(login(userDetails, history)),
				    register: (userDetails, history) =>
				      dispatch(register(userDetails, history)),
				  };

	
			};

	-now define login and register function and create functionality

..................FLOW...................

>LoginPage: 
when someone presses the button--> control goes to handleLogin
-->in handlelogin login function will get executed where we will be passing userdetails and history object(this login function is coming from the props)(it is coming from the props because we are mapping all of their authactions using connect function)
-->afterexecuting login function, it will go to the authActions.js
-->geActions()will be executed/dispatched
-->here it will be receiving the userdetails and navigate object 
--> it will dispatch that login action
-->then we will be executing our async call to api
-->if no error then we will get userdetails from response.data
-->and we will set that to local storage
-->now we will dispatch setuserdetails(object of the type of actions we will dispatch)
-->in reducer that action will be found and new state will be set.

